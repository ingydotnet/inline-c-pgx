---
+grammar: inline-c
+toprule: code
+version: 0.0.1
ALL:
  .rgx: '[\s\S]'
COMMA:
  .rgx: ','
LPAREN:
  .rgx: \(
anything_else:
  .rgx: .*(?:\r?\n|\z)
arg:
  .rgx: (?:\s*(?:(?:(?:unsigned|long|extern|const)\b\s*)*((?:\w+))\s*(\**)|(?:(?:unsigned|long|extern|const)\b\s*)*\**)\s*\s*((?:\w+))|(\.\.\.))
arg_decl:
  .rgx: (\s*(?:(?:(?:unsigned|long|extern|const)\b\s*)*((?:\w+))\s*(\**)|(?:(?:unsigned|long|extern|const)\b\s*)*\**)\s*\s*(?:\w+)*|\.\.\.)
code:
  +min: 1
  .ref: part
comment:
  .any:
  - .rgx: \s*//[^\n]*\n
  - .rgx: \s*/\*(?:[^\*]+|\*(?!/))*\*/([\t]*)?
function_declaration:
  .all:
  - .ref: rtype
  - .rgx: ((?:\w+))
  - .ref: LPAREN
  - +max: 1
    .all:
    - .ref: arg_decl
    - +min: 0
      -flat: 1
      .all:
      - .ref: COMMA
      - .ref: arg_decl
  - .rgx: \s*\)\s*;\s*
function_definition:
  .all:
  - .ref: rtype
  - .rgx: ((?:\w+))
  - .ref: LPAREN
  - +max: 1
    .all:
    - .ref: arg
    - +min: 0
      -flat: 1
      .all:
      - .ref: COMMA
      - .ref: arg
  - .rgx: \s*\)\s*\{\s*
part:
  .all:
  - +asr: 1
    .ref: ALL
  - .any:
    - .ref: comment
    - .ref: function_definition
    - .ref: function_declaration
    - .ref: anything_else
rtype:
  .rgx: \s*(?:(?:(?:unsigned|long|extern|const)\b\s*)*((?:\w+))\s*(\**)|(?:(?:unsigned|long|extern|const)\b\s*)+\**)\s*
